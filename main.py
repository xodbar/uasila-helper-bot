import random
from docxtpl import DocxTemplate
from datetime import datetime
import sqlite3
import telebot
from telebot import types

token = '2082328415:AAETH2cZCgD72_KWvKyT0skvpaWV-2Xovvs'
bot = telebot.TeleBot(token)

is_authorized = False

db_connection = sqlite3.connect('database.db', check_same_thread=False)
cursor = db_connection.cursor()

select_query = """SELECT * from test"""
cursor.execute(select_query)
records = cursor.fetchall()


def update_database():
    global db_connection
    db_connection = sqlite3.connect('database.db', check_same_thread=False)
    global cursor
    cursor = db_connection.cursor()
    cursor.execute("""SELECT * from test""")
    global records
    records = cursor.fetchall()


def db_table_val(user_id: int, user_name: str, user_surname: str, username: str):
    cursor.execute('INSERT INTO test (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?)', (user_id,
                                                                                                         user_name,
                                                                                                         user_surname,
                                                                                                         username))
    db_connection.commit()


def get_data(user_id: int):
    i = 0
    index = -1
    for data in records:
        print(data[1], user_id)
        if data[1] == user_id:
            index = i
            break
        i += 1
    return index


moods = ('–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! '
         ' –ê –µ—â–µ –≤—á–µ—Ä–∞ —è —Ö–æ—Ç–µ–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å "–Ø —Ä–æ–±–æ—Ç", –Ω–æ Google –≤—ã–¥–∞–ª –º–Ω–µ –∫–∞–ø—á—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç"'
         ' –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.', '–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ!'
                         ' –°–µ–≥–æ–¥–Ω—è, –ª–∏—Å—Ç–∞—è –ª–µ–Ω—Ç—É, —è –∑–∞–º–µ—Ç–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                         ': "–†–æ–±–æ—Ç –Ω–∞ —Å–∞–π—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π'
                         ' —Ç—Ä–µ–±—É–µ—Ç –æ—Ç –º–µ–Ω—è –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è –Ω–µ —Ä–æ–±–æ—Ç - —ç—Ç–æ —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∏–µ –º–∞—à–∏–Ω?".'
                         ' –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–µ —Ç–∞–∫ –ª–∏?')


def get_number():
    number = random.randint(0, 1)
    return number


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}.'
                                      f' –Ø –£–∞—Å–∏–ª–∞, –í–∞—à –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ä–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')
    keyboard = types.InlineKeyboardMarkup()

    key_documents = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ üìù', callback_data='documents')
    keyboard.add(key_documents)

    key_authors = types.InlineKeyboardButton(text='–û–± –∞–≤—Ç–æ—Ä–∞—Ö üë®üèª‚Äçüíª', callback_data='authors')
    keyboard.add(key_authors)

    bot.send_message(message.from_user.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –í–∞–º –æ–ø—Ü–∏—é:', reply_markup=keyboard)


@bot.message_handler(commands=['help'])
def start_message(message):
    keyboard = types.InlineKeyboardMarkup()

    key_authors = types.InlineKeyboardButton(text='–û–± –∞–≤—Ç–æ—Ä–∞—Ö üë®üèª‚Äçüíª', callback_data='authors')
    keyboard.add(key_authors)

    key_documents = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ üìù', callback_data='documents')
    keyboard.add(key_documents)

    bot.send_message(message.from_user.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –í–∞–º –æ–ø—Ü–∏—é:', reply_markup=keyboard)


@bot.message_handler(commands=['profile'])
def start_message(message):
    update_database()
    bot.send_message(message.from_user.id, text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ'
                                                f'\n–ò–º—è: {records[get_data(message.from_user.id)][2]}\n–§–∞–º–∏–ª–∏—è:'
                                                f' {records[get_data(message.from_user.id)][4]} + '
                                                f'{type(records[get_data(message.from_user.id)][4])}'
                                                f'\n–û—Ç—á–µ—Å—Ç–≤–æ: {records[get_data(message.from_user.id)][6]}'
                                                f'\nTelegram ID: '
                                                f'{records[get_data(message.from_user.id)][1]}'
                                                f'\n–ù–∏–∫–Ω–µ–π–º: {records[get_data(message.from_user.id)][3]}'
                                                f'\nOPEN ID: {records[get_data(message.from_user.id)][5]}'
                                                f'\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {records[get_data(message.from_user.id)][7]}'
                                                f'\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π.')


@bot.message_handler(commands=['edit'])
def start_message(message):
    bot.send_message(message.from_user.id, text='üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å'
                                                f'\n[1] - –ò–º—è '
                                                f'(–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {records[get_data(message.from_user.id)][2]})'
                                                f'\n[2] - –§–∞–º–∏–ª–∏—è '
                                                f'(–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {records[get_data(message.from_user.id)][4]})'
                                                f'\n[3] - –û—Ç—á–µ—Å—Ç–≤–æ '
                                                f'(–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {records[get_data(message.from_user.id)][6]})'
                                                f'\n[4] - OPEN ID (–ø—Ä–∏–º. 29154) '
                                                f'(–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {records[get_data(message.from_user.id)][5]})'
                                                f'\n[5] - –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–∏–º. Information Systems) '
                                                f'(–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {records[get_data(message.from_user.id)][7]})')
    bot.register_next_step_handler(message, edit_data)


document_data = []
necessary_index = -1
doc_type = -1


def fill_document1(message):
    document_data.clear()
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (–ø—Ä–∏–º. 2)")
    bot.register_next_step_handler(message, get_course)


def fill_document2(message):
    document_data.clear()
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (–ø—Ä–∏–º. 2)")
    bot.register_next_step_handler(message, get_course)


def get_course(message):
    document_data.append(message.text)
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –≥—Ä—É–ø–ø—É (–ø—Ä–∏–º. IT1-2008)")
    bot.register_next_step_handler(message, get_group)


def get_group(message):
    document_data.append(message.text)
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫–Ω—ã–π –Ω–æ–º–µ—Ä (–ø—Ä–∏–º. +77770010101)")
    bot.register_next_step_handler(message, get_phone)


def get_phone(message):
    document_data.append(message.text)
    if doc_type == 1:
        bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–ø—Ä–∏–º. 11444 Discrete Mathematics)")
        bot.register_next_step_handler(message, get_discipline)
    elif doc_type == 2:
        bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ–∏ –∏ –§–ò–û –¥–µ–∫–∞–Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"
                                               " (–ø—Ä–∏–º. –§–¶–¢ –¢—É–≥–∞–Ω–±–∞–µ–≤–æ–π –ü. –ö.)")
        bot.register_next_step_handler(message, get_dean)


def get_discipline(message):
    document_data.append(message.text)
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ –ø–µ—Ä–≤—ã–π –†–ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (–ø—Ä–∏–º. 95)")
    bot.register_next_step_handler(message, get_rating1)


def get_rating1(message):
    document_data.append(message.text)
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ –≤—Ç–æ—Ä–æ–π –†–ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (–ø—Ä–∏–º. 95)")
    bot.register_next_step_handler(message, get_rating2)


def get_rating2(message):
    document_data.append(message.text)
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ —ç–∫–∑–∞–º–µ–Ω –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (–ø—Ä–∏–º. 95)")
    bot.register_next_step_handler(message, get_exam)


def get_exam(message):
    document_data.append(message.text)
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ (–ø—Ä–∏–º. Rabitov R.R.)")
    bot.register_next_step_handler(message, get_teacher)


def get_teacher(message):
    document_data.append(message.text)
    bot.send_message(necessary_index, text="–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É —ç–∫–∑–∞–º–µ–Ω–∞ (–ø—Ä–∏–º. –ø–∏—Å—å–º–µ–Ω–Ω–æ, —É—Å—Ç–Ω–æ")
    bot.register_next_step_handler(message, get_exam_type)


def get_exam_type(message):
    document_data.append(message.text)
    fill_document()


def get_dean(message):
    document_data.append(message.text)
    fill_document_2()


def fill_document_2():
    try:
        speciality = records[get_data(necessary_index)][7]
        fullname = (records[get_data(necessary_index)][4] + " " + records[get_data(necessary_index)][2] + " "
                    + records[get_data(necessary_index)][6])
        openid = records[get_data(necessary_index)][5]
        date = datetime.now().date()

        if records[get_data(necessary_index)][6] is None:
            if (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 1] == '–≤':
                surname = records[get_data(necessary_index)][4] + '–∞'
                sign = (surname + " " + (records[get_data(necessary_index)][2])[0] + ".")
            elif (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 2] == '–≤' \
                    and (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 1] \
                    == '–∞':
                surname = records[get_data(necessary_index)][4]
                surname = surname[:-1] + "–æ–π"
                sign = (surname + " " + (records[get_data(necessary_index)][2])[0] + ".")
            else:
                sign = (records[get_data(necessary_index)][4] + " " + (records[get_data(necessary_index)][2])[0] + ".")
        else:
            if (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 1] == '–≤':
                surname = records[get_data(necessary_index)][4] + '–∞'
                sign = (surname + " " + (records[get_data(necessary_index)][2])[0] + "." +
                        (records[get_data(necessary_index)][6])[0] + ".")
            elif (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 2] == '–≤' \
                    and (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 1] \
                    == '–∞':
                surname = records[get_data(necessary_index)][4]
                surname = surname[:-1] + "–æ–π"
                sign = (surname + " " + (records[get_data(necessary_index)][2])[0] + "." +
                        (records[get_data(necessary_index)][6])[0] + ".")
            else:
                sign = (records[get_data(necessary_index)][4] + " " + (records[get_data(necessary_index)][2])[0] + "."
                        + (records[get_data(necessary_index)][6])[0] + ".")

        doc = DocxTemplate("doc2temp.docx")
        context = {
            'dean_faculty': document_data[3],
            'course_num': document_data[0],
            'speciality': speciality,
            'group': document_data[1],
            'student_fullname': sign,
            'open_id': openid,
            'phone_number': document_data[2],
            'student_sign': fullname,
            'date': date
        }

        doc.render(context)
        doc_name = f'{records[get_data(necessary_index)][1]}_doc2.docx'
        doc.save(doc_name)
        bot.send_document(necessary_index, open(r'{0}'.format(doc_name), 'rb'))
    except sqlite3.Error as e:
        bot.send_message(necessary_index, text=f"–í –ø—Ä–æ—Ñ–∏–ª–µ (/profile) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ,"
                                               f" –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –ø—Ä–∏"
                                               f" –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /edit. –ö–æ–¥ –æ—à–∏–±–∫–∏: {e}")


def fill_document():
    try:
        speciality = records[get_data(necessary_index)][7]
        fullname = (records[get_data(necessary_index)][4] + " " + records[get_data(necessary_index)][2] + " "
                    + records[get_data(necessary_index)][6])
        openid = records[get_data(necessary_index)][5]
        date = datetime.now().date()

        if records[get_data(necessary_index)][6] is None:
            if (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 1] == '–≤':
                surname = records[get_data(necessary_index)][4] + '–∞'
                sign = (surname + " " + (records[get_data(necessary_index)][2])[0] + ".")
            elif (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 2] == '–≤' \
                    and (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 1] \
                    == '–∞':
                surname = records[get_data(necessary_index)][4]
                surname = surname[:-1] + "–æ–π"
                sign = (surname + " " + (records[get_data(necessary_index)][2])[0] + ".")
            else:
                sign = (records[get_data(necessary_index)][4] + " " + (records[get_data(necessary_index)][2])[0] + ".")
        else:
            if (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 1] == '–≤':
                surname = records[get_data(necessary_index)][4] + '–∞'
                sign = (surname + " " + (records[get_data(necessary_index)][2])[0] + "." +
                        (records[get_data(necessary_index)][6])[0] + ".")
            elif (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 2] == '–≤' \
                    and (records[get_data(necessary_index)][4])[(len(records[get_data(necessary_index)][4])) - 1] \
                    == '–∞':
                surname = records[get_data(necessary_index)][4]
                surname = surname[:-1] + "–æ–π"
                sign = (surname + " " + (records[get_data(necessary_index)][2])[0] + "." +
                        (records[get_data(necessary_index)][6])[0] + ".")
            else:
                sign = (records[get_data(necessary_index)][4] + " " + (records[get_data(necessary_index)][2])[0] + "."
                        + (records[get_data(necessary_index)][6])[0] + ".")

        doc = DocxTemplate("doc1temp.docx")
        context = {
            'course_num': document_data[0],
            'speciality': speciality,
            'group': document_data[1],
            'student_fullname': sign,
            'open_id': openid,
            'phone_number': document_data[2],
            'discipline_name': document_data[3],
            'mt1_rating': document_data[4],
            'mt2_rating': document_data[5],
            'exam_rating': document_data[6],
            'teacher_name': document_data[7],
            'exam_type': document_data[8],
            'student_sign': fullname,
            'date': date
        }

        doc.render(context)
        doc_name = f'{records[get_data(necessary_index)][1]}_doc1.docx'
        doc.save(doc_name)
        bot.send_document(necessary_index, open(r'{0}'.format(doc_name), 'rb'))
    except sqlite3.Error as e:
        bot.send_message(necessary_index, text=f"–í –ø—Ä–æ—Ñ–∏–ª–µ (/profile) –æ—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ,"
                                               f" –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –ø—Ä–∏"
                                               f" –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /edit. –ö–æ–¥ –æ—à–∏–±–∫–∏: {e}")


def edit_data(message):
    if message.text == "1":
        bot.send_message(message.from_user.id, text=f'–¢–µ–∫—É—â–µ–µ –∏–º—è: {records[get_data(message.from_user.id)][2]}\n'
                                                    f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
        bot.register_next_step_handler(message, edit_name)
    elif message.text == "2":
        bot.send_message(message.from_user.id, text=f'–¢–µ–∫—É—â–∞—è —Ñ–∞–º–∏–ª–∏—è: {records[get_data(message.from_user.id)][4]}\n'
                                                    f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
        bot.register_next_step_handler(message, edit_surname)
    elif message.text == "3":
        bot.send_message(message.from_user.id, text=f'–¢–µ–∫—É—â–µ–µ –æ—Ç—á–µ—Å—Ç–≤–æ: {records[get_data(message.from_user.id)][5]}\n'
                                                    f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
        bot.register_next_step_handler(message, edit_patronymic)
    elif message.text == "4":
        bot.send_message(message.from_user.id, text=f'–¢–µ–∫—É—â–∏–π OPEN ID: {records[get_data(message.from_user.id)][5]}\n'
                                                    f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π –≤ '
                                                    f'5 —Å–∏–º–≤–æ–ª–æ–≤)')
        bot.register_next_step_handler(message, edit_open_id)
    elif message.text == "5":
        bot.send_message(message.from_user.id, text=f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:'
                                                    f'{records[get_data(message.from_user.id)][5]}\n'
                                                    f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
        bot.register_next_step_handler(message, edit_speciality)


def edit_name(message):
    try:
        cursor.execute('''UPDATE test SET user_name = ? WHERE user_id = ? ''',
                       (message.text, message.from_user.id))
        db_connection.commit()
        update_database()
        bot.send_message(message.from_user.id, text="–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–Ω–µ–Ω–µ–Ω—ã.\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ /edit –¥–ª—è"
                                                    " –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–≤–æ–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    except sqlite3.Error as e:
        bot.send_message(message.from_user.id, text=f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
                                                    f': {e}. –ü–≤–æ—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.')


def edit_surname(message):
    try:
        cursor.execute('''UPDATE test SET user_surname = ? WHERE user_id = ? ''',
                       (message.text, message.from_user.id))
        db_connection.commit()
        update_database()
        bot.send_message(message.from_user.id, text="–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–Ω–µ–Ω–µ–Ω—ã.\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ /edit –¥–ª—è"
                                                    " –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–≤–æ–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    except sqlite3.Error as e:
        bot.send_message(message.from_user.id, text=f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
                                                    f': {e}. –ü–≤–æ—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.')


def edit_patronymic(message):
    try:
        cursor.execute('''UPDATE test SET user_patr = ? WHERE user_id = ? ''',
                       (message.text, message.from_user.id))
        db_connection.commit()
        update_database()
        bot.send_message(message.from_user.id, text="–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–Ω–µ–Ω–µ–Ω—ã.\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ /edit –¥–ª—è"
                                                    " –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–≤–æ–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    except sqlite3.Error as e:
        bot.send_message(message.from_user.id, text=f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
                                                    f': {e}. –ü–≤–æ—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.')


def edit_open_id(message):
    try:
        try:
            user_input = int(message.text)
        except ValueError:
            user_input = 0
            bot.send_message(message.from_user.id, text="–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

        cursor.execute('''UPDATE test SET open_id = ? WHERE user_id = ? ''',
                       (user_input, message.from_user.id))
        db_connection.commit()
        update_database()
        bot.send_message(message.from_user.id, text="–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–Ω–µ–Ω–µ–Ω—ã.\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ /edit –¥–ª—è"
                                                    " –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–≤–æ–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    except sqlite3.Error as e:
        bot.send_message(message.from_user.id, text=f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
                                                    f': {e}. –ü–≤–æ—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.')


def edit_speciality(message):
    try:
        cursor.execute('''UPDATE test SET speciality = ? WHERE user_id = ? ''',
                       (message.text, message.from_user.id))
        db_connection.commit()
        update_database()
        bot.send_message(message.from_user.id, text="–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–Ω–µ–Ω–µ–Ω—ã.\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ /edit –¥–ª—è"
                                                    " –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–≤–æ–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    except sqlite3.Error as e:
        bot.send_message(message.from_user.id, text=f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
                                                    f': {e}. –ü–≤–æ—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.')


@bot.message_handler(commands=['start_docs'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup()
    document1 = types.KeyboardButton('–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –ø–µ—Ä–µ—Å–¥–∞—á—É')
    document2 = types.KeyboardButton('–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–¥–∞—á—É —ç–∫–∑–∞–º–µ–Ω–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ')

    markup.row(document1, document2)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º –¥–æ–∫—É–º–µ–Ω—Ç.', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def send_text(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç' or message.text.lower() == '—Å–∞–ª–∞–º' or message.text.lower() == 'hello' or \
            message.text.lower() == 'hi':
        keyboard = types.InlineKeyboardMarkup()
        key_authors = types.InlineKeyboardButton(text='–û–± –∞–≤—Ç–æ—Ä–∞—Ö üë®üèª‚Äçüíª', callback_data='authors')
        keyboard.add(key_authors)
        bot.send_message(message.from_user.id, text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,'
                                                    f' –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –í–∞–º –æ–ø—Ü–∏—é:', reply_markup=keyboard)
    elif message.text.lower() == '–ø–æ–∫–∞' or message.text.lower() == '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è' or \
            message.text.lower() == '—Å–∞—É–±–æ–ª' or \
            message.text.lower() == 'bye' or message.text.lower() == 'goodbye':
        bot.send_message(message.chat.id, f'–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {message.from_user.first_name}! –†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å –í–∞–º!')
    elif message.text.lower() == '–∫–∞–∫ —Ç—ã?' or message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?' or \
            message.text.lower() == 'how are you?' or message.text.lower() == '–∫–∞–ª–∞–π—Å—ã–Ω?':
        bot.send_message(message.chat.id, moods[get_number()])

    elif message.text.lower() == "—Å–æ–≥–ª–∞—à–∞—é—Å—å":
        try:
            us_id = message.from_user.id
            us_name = message.from_user.first_name
            us_surname = message.from_user.last_name
            username = message.from_user.username

            db_table_val(user_id=us_id, user_name=us_name, user_surname=us_surname, username=username)

            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n ‚ö†Ô∏è'
                                              '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±—ã–ª–∏'
                                              ' —Å–æ–±—Ä–∞–Ω—ã –ª–∏—à—å –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –µ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'
                                              ' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö/–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å'
                                              ' –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏. –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π '
                                              '/profile. –î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_docs')
            global is_authorized
            is_authorized = True
        except sqlite3.Error:
            bot.send_message(message.chat.id, '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–º–µ—é—Ç—Å—è —Å–≤–µ–¥–µ–Ω–∏—è –æ–± —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è '
                                              '—Å–≤–µ–¥–µ–Ω–∏–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤–≤–µ–¥–∏—Ç–µ /profile. –î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
                                              ' –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_docs')
            is_authorized = True

    elif message.text.lower() == "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –ø–µ—Ä–µ—Å–¥–∞—á—É":
        global necessary_index
        necessary_index = message.from_user.id
        global doc_type
        doc_type = 1
        fill_document1(message)

    elif message.text.lower() == "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–¥–∞—á—É —ç–∫–∑–∞–º–µ–Ω–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ":
        necessary_index = message.from_user.id
        doc_type = 2
        fill_document2(message)

    else:
        bot.send_message(message.from_user.id,
                         '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§∑üèª‚Äç. –í–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π'
                         ' –æ –º–æ–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ.')


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    if call.data == "authors":
        bot.send_message(call.message.chat.id, '–û–± –∞–≤—Ç–æ—Ä–∞—Ö:'
                                               '\n‚ñ´  –ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –ö–µ–Ω–∂–µ–±—É–ª–∞—Ç–æ–≤–∞ –î. –¢. üë©üèª‚Äçüè´'
                                               '\n‚ñ´Ô∏è–ê–≤—Ç–æ—Ä –Ω–∞—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã - –ï—Å–µ–Ω–≥–∞–∑–∏–µ–≤ –ñ. –ú. üßëüèª‚Äçüéì\n'
                                               '‚ñ´Ô∏è–ê–≤—Ç–æ—Ä –Ω–∞—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã - –ö–µ—Ä–∏–º–∂–∞–Ω –ê. –ö. üë©üèª‚Äçüéì')
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

    elif call.data == "documents":
        bot.send_message(call.message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –í–∞–º –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π '
                                               '–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å '
                                               '–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–æ'
                                               ' –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –°–æ–≥–ª–∞—à–∞—é—Å—å')
        bot.send_document(call.message.chat.id, open(r'privacy_policy.docx', 'rb'))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)


bot.infinity_polling()
